// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package database

import (
	"context"
)

const addPost = `-- name: AddPost :one
;

INSERT INTO posts (user_id, language_id, code, comment, post_date)
   VALUES (?, ?, ?, ?, ?) RETURNING post_id, user_id, language_id, code, comment, post_date
`

type AddPostParams struct {
	UserID     int64
	LanguageID int64
	Code       string
	Comment    string
	PostDate   string
}

func (q *Queries) AddPost(ctx context.Context, arg AddPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, addPost,
		arg.UserID,
		arg.LanguageID,
		arg.Code,
		arg.Comment,
		arg.PostDate,
	)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.UserID,
		&i.LanguageID,
		&i.Code,
		&i.Comment,
		&i.PostDate,
	)
	return i, err
}

const addPostIntoTree = `-- name: AddPostIntoTree :one
;

INSERT INTO posts_tree (post_id, parent_post_id)
   VALUES (?, ?) RETURNING post_id, parent_post_id
`

type AddPostIntoTreeParams struct {
	PostID       int64
	ParentPostID int64
}

func (q *Queries) AddPostIntoTree(ctx context.Context, arg AddPostIntoTreeParams) (PostsTree, error) {
	row := q.db.QueryRowContext(ctx, addPostIntoTree, arg.PostID, arg.ParentPostID)
	var i PostsTree
	err := row.Scan(&i.PostID, &i.ParentPostID)
	return i, err
}

const addUser = `-- name: AddUser :one
;

INSERT INTO users (username, password, email, status) VALUES (?, ?, ?, ?)
RETURNING user_id, username, password, email, status
`

type AddUserParams struct {
	Username string
	Password string
	Email    string
	Status   int64
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Status,
	)
	return i, err
}

const getPostsFromRoot = `-- name: GetPostsFromRoot :many
;

SELECT t.post_id, parent_post_id, p.post_id, user_id, language_id, code, comment, post_date FROM posts_tree t 
   INNER JOIN posts p ON t.post_id = p.post_id 
   WHERE t.post_id = ? OR t.parent_post_id = ?
   ORDER BY t.parent_post_id ASC
`

type GetPostsFromRootParams struct {
	PostID       int64
	ParentPostID int64
}

type GetPostsFromRootRow struct {
	PostID       int64
	ParentPostID int64
	PostID_2     int64
	UserID       int64
	LanguageID   int64
	Code         string
	Comment      string
	PostDate     string
}

func (q *Queries) GetPostsFromRoot(ctx context.Context, arg GetPostsFromRootParams) ([]GetPostsFromRootRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsFromRoot, arg.PostID, arg.ParentPostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsFromRootRow
	for rows.Next() {
		var i GetPostsFromRootRow
		if err := rows.Scan(
			&i.PostID,
			&i.ParentPostID,
			&i.PostID_2,
			&i.UserID,
			&i.LanguageID,
			&i.Code,
			&i.Comment,
			&i.PostDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, username, password, email, status FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUser = `-- name: LoginUser :one
;

SELECT user_id, username, password, email, status FROM users 
  WHERE username = ? AND password = ? 
  LIMIT 1
`

type LoginUserParams struct {
	Username string
	Password string
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Status,
	)
	return i, err
}
